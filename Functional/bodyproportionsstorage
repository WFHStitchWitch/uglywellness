import datetime
import csv
from fractions import Fraction

# Initialize an empty table (list of lists)
body_proportions_storage_table = []
headers = ["Neck", "Bust", "Underbust", "Waist", "Lower Belly", "Hip", "Upper Arm", "Lower Arm", "Thigh", "Calf", "Timestamp"]

def parse_mixed_fraction(mixed_fraction):
    ''' Function to parse mixed fractions from user inputs and convert them to decimal values.'''
    if mixed_fraction.lower() == "na":
        return None
    parts = mixed_fraction.split()
    if len(parts) == 2:
        try:
            whole_number = int(parts[0])
            fraction = Fraction(parts[1])
            return whole_number + float(fraction)
        except ValueError:
            raise ValueError(f"Invalid mixed fraction format: {mixed_fraction}")
    elif len(parts) == 1:
        try:
            return float(Fraction(parts[0]))
        except ValueError:
            try:
                return float(parts[0])
            except ValueError:
                raise ValueError(f"Invalid fraction or whole number format: {mixed_fraction}")
    else:
        raise ValueError(f"Invalid mixed fraction format: {mixed_fraction}")


def add_row_proportions():
    '''Function to take user input and store it in the table with a datestamp appended at the end of the row, regardless of how many columns between 1 and x exist before arriving at the date column. The function will provide a choice to use the current system date or to manually enter a date. The journal entry will be logged as a new row into the table, saved, and there will be a choice given to create a new journal entry or to stop expecting inputs.'''
    row = []
    for header in headers[:-1]:  # Exclude the "Timestamp" header
        while True:
            measurement = input(f"Enter your measurement for {header} as a mixed fraction (e.g., '42 3/8') or a whole number. If you are missing a value for this measurement, enter 'na'.")
            try:
                measurement_proportions = parse_mixed_fraction(measurement)
            except ValueError as e:
                print(e)
                print("Please try again.")
    row.append(measurement_proportions)
    # Choose if using today's date or a different date.
    now_or_not_now = input("Use current system date and time? (y/n): ").strip().lower()
    if now_or_not_now in ['yes', 'y']:
        timestamp = datetime.datetime.now().strftime("%m/%d/%y %I:%M %p")
    else:
        manual_timestamp = input("Enter the date as MM/DD/YY HH:MM AM/PM.")
        # Validate the manual timestamp
        try:
            datetime.datetime.strptime(manual_timestamp, "%m/%d/%y %I:%M %p")
            timestamp = manual_timestamp
        except ValueError:
            print("Invalid date format. Try again.")
            return    
    row.append(timestamp)
    body_proportions_storage_table.append(row)

    # Save the row to the CSV file immediately
    with open('body_proportions_storage_table.csv', 'a', newline='') as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(row)
    print("Entry logged successfully.")

# Write headers to the CSV file if it doesn't exist or is empty
try:
    with open('body_proportions_storage_table.csv', 'r') as csvfile:
        pass
except FileNotFoundError:
    with open('body_proportions_storage_table.csv', 'w', newline='') as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(headers)

# Continuously prompt the user to add rows
while True:
    add_row_proportions()
    continue_input = input("Do you want to add another row? (yes/no): ").strip().lower()
    if continue_input in ['yes', 'y']:
        add_row_proportions()
    else: 
        break
    
add_row_proportions()